# insert ipdb breakpoint
snippet pdb
	import pdb; pdb.set_trace()
snippet ipdb
	import ipdb; ipdb.set_trace()
snippet rpdb
	import rpdb; rpdb.set_trace()

# encoding
snippet cutf "encoding" !b
	# coding: utf-8

# import
snippet from
	from ${1:package} import ${2:module}

# if/else/elif
snippet if
	if ${1:True}:
	    ${2:pass}
snippet else
	else:
	    ${1:pass}
snippet elif
	elif ${1:True}:
	    ${2:pass}

# class definition
snippet class
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${0}

# New Function/metod
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${0}

snippet assert
	assert ${1:expected} ${2:==} ${3:result}

# hasattr/getattr
snippet hasattr
	hasattr(${1:object}, ${2:attr})
snippet getattr
	getattr(${1:object}, "${2:attr}", ${3:None})

# tests
snippet test_
	def test_${1:what}(self):
		"""Tests that ${2:what}"""
		${3:pass}


snippet for
	for ${1:i} in ${2:sequence}:
		${3:pass}
snippet while
	while ${1:condition}:
		${0:pass}
# context
snippet with
	with ${1:context} as ${2:name}:
	    ${3:pass}

# import python loggin module and create a logger
snippet ilo
	import logging
	logger = logging.getLogger(__name__)

# logger
snippet logger
	logger.${1:info}("${2:}")
snippet logger.
	logger.${1:info}("${2:}")

# try/except with logging
snippet try Try/Except
	try:
		${1:pass}
	except (${2:Exception},)${3: as e}:
		logger.exception("${4:Message}")
		${5:raise}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except (${2:Exception},)${3: as e}:
		logger.exception("${4:Message}")
		${5:raise}
	finally:
		${6:pass}
